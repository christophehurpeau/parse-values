{"version":3,"sources":["../src/index.js"],"names":["suite","test"],"mappings":";;AAEA;;AACA;;;;;;AAHA;;AAKAA,MAAM,QAAN,EAAgB,MAAM;AACpBC,OAAK,qBAAL,EAA4B,MAAM;AAChC,iCAAgB,gBAAY,QAAZ,CAAhB,EAAuC,CAAC,MAAD,CAAvC;AACD,GAFD;;AAIAA,OAAK,2BAAL,EAAkC,MAAM;AACtC,iCAAgB,gBAAY,cAAZ,CAAhB,EAA6C,CAAC,QAAD,CAA7C;AACD,GAFD;;AAIAA,OAAK,uCAAL,EAA8C,MAAM;AAClD,wBACE,MAAM,gBAAY,OAAZ,CADR,EAEE,oDAFF;AAID,GALD;;AAOAA,OAAK,yDAAL,EAAgE,MAAM;AACpE,wBACE,MAAM,gBAAY,WAAZ,CADR,EAEE,kCAFF;AAID,GALD;AAMD,CAtBD;;AAwBAD,MAAM,4BAAN,EAAoC,MAAM;AACxCC,OAAK,YAAL,EAAmB,MAAM;AACvB,iCAAgB,gBAAY,YAAZ,CAAhB,EAA2C,CAAC,MAAD,EAAS,OAAT,CAA3C;AACD,GAFD;;AAIAA,OAAK,yBAAL,EAAgC,MAAM;AACpC,iCAAgB,gBAAY,cAAZ,CAAhB,EAA6C,CAAC,MAAD,EAAS,OAAT,CAA7C;AACD,GAFD;;AAIAA,OAAK,mCAAL,EAA0C,MAAM;AAC9C,iCAAgB,gBAAY,eAAZ,CAAhB,EAA8C,CAAC,MAAD,EAAS,OAAT,CAA9C;AACD,GAFD;AAGD,CAZD;;AAcAD,MAAM,2BAAN,EAAmC,MAAM;AACvCC,OAAK,YAAL,EAAmB,MAAM;AACvB,iCAAgB,gBAAY,aAAZ,CAAhB,EAA4C,CAAC,MAAD,EAAS,OAAT,CAA5C;AACD,GAFD;;AAIAA,OAAK,yBAAL,EAAgC,MAAM;AACpC,iCAAgB,gBAAY,eAAZ,CAAhB,EAA8C,CAAC,MAAD,EAAS,OAAT,CAA9C;AACD,GAFD;;AAIAA,OAAK,mCAAL,EAA0C,MAAM;AAC9C,iCACE,gBAAY,8BAAZ,CADF,EAEE,CAAC,WAAD,EAAc,aAAd,CAFF;AAID,GALD;AAMD,CAfD","file":"index.js","sourcesContent":["/* global suite, test */\n\nimport { deepStrictEqual, throws } from 'assert';\nimport parseValues from '../../';\n\nsuite('quotes', () => {\n  test('simple quoted value', () => {\n    deepStrictEqual(parseValues('\"test\"'), ['test']);\n  });\n\n  test('simple quoted with escape', () => {\n    deepStrictEqual(parseValues('\"\\\\\"test\\\\\"\"'), ['\"test\"']);\n  });\n\n  test('simple throws when quote is not ended', () => {\n    throws(\n      () => parseValues('\"test'),\n      /^Error: Unexpected end, the quote \" never ended\\.$/,\n    );\n  });\n\n  test('simple throws when found a quote after a choice started', () => {\n    throws(\n      () => parseValues('test\"test'),\n      /^Error: Unexpected \" after test$/,\n    );\n  });\n});\n\nsuite('values separated by spaces', () => {\n  test('two values', () => {\n    deepStrictEqual(parseValues('test test2'), ['test', 'test2']);\n  });\n\n  test('two values, with quotes', () => {\n    deepStrictEqual(parseValues('\"test\" test2'), ['test', 'test2']);\n  });\n\n  test('two values, with quotes collapsed', () => {\n    deepStrictEqual(parseValues('\"test\"\"test2\"'), ['test', 'test2']);\n  });\n});\n\nsuite('values separated by comma', () => {\n  test('two values', () => {\n    deepStrictEqual(parseValues('test, test2'), ['test', 'test2']);\n  });\n\n  test('two values, with quotes', () => {\n    deepStrictEqual(parseValues('\"test\", test2'), ['test', 'test2']);\n  });\n\n  test('two values, with quotes and space', () => {\n    deepStrictEqual(\n      parseValues('\"test test\", \\'test2 test2\\''),\n      ['test test', 'test2 test2'],\n    );\n  });\n});\n"]}