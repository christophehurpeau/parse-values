{"version":3,"sources":["../src/index.js"],"names":["parseChoices","quotes","charCodeAt","escape","basicSeparators","spaceSeparators","text","buffer","Buffer","from","bufferLength","length","choices","quote","currentChoice","separators","includes","i","chr","push","String","fromCharCode","Error","str","match"],"mappings":";;;;;kBAqBwBA,Y;AArBxB,MAAMC,SAAS,CACb,IAAIC,UAAJ,EADa,EAEb,KAAKA,UAAL,EAFa,EAGb,IAAIA,UAAJ,EAHa,CAAf;;AAMA,MAAMC,SAAS,KAAKD,UAAL,EAAf;;AAEA,MAAME,kBAAkB,CACtB,IAAIF,UAAJ,EADsB,EAEtB,IAAIA,UAAJ,EAFsB,EAGtB,KAAKA,UAAL,EAHsB,EAItB,KAAKA,UAAL,EAJsB,CAAxB;;AAOA,MAAMG,kBAAkB,CACtB,GAAGD,eADmB,EAEtB,IAAIF,UAAJ,EAFsB,CAAxB;;AAMe,SAASF,YAAT,CAAsBM,IAAtB,EAAoC;AACjD,QAAMC,SAASC,OAAOC,IAAP,CAAa,IAAEH,IAAK,GAApB,CAAf;AACA,QAAMI,eAAeH,OAAOI,MAA5B;AACA,QAAMC,UAAU,EAAhB;;AAEA,MAAIC,QAAQ,IAAZ;AACA,MAAIC,gBAAgB,EAApB;;AAEA,MAAIC,aAAaT,KAAKU,QAAL,CAAc,GAAd,KAAsBV,KAAKU,QAAL,CAAc,GAAd,CAAtB,GAA2CZ,eAA3C,GAA6DC,eAA9E;;AAEA,OAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIP,YAApB,EAAkCO,GAAlC,EAAuC;AACrC,UAAMC,MAAMX,OAAOU,CAAP,CAAZ;;AAEA,QAAI,CAACJ,KAAD,IAAUE,WAAWC,QAAX,CAAoBE,GAApB,CAAd,EAAwC;AACtC,UAAIJ,cAAcH,MAAlB,EAA0B;AACxBC,gBAAQO,IAAR,CAAaL,aAAb;AACAA,wBAAgB,EAAhB;AACD;AACF,KALD,MAKO,IAAID,SAASK,QAAQf,MAAjB,IAA2BI,OAAOU,IAAI,CAAX,MAAkBJ,KAAjD,EAAwD;AAC7D;AACAI,WAAK,CAAL;AACAH,uBAAiBM,OAAOC,YAAP,CAAoBR,KAApB,CAAjB;AACD,KAJM,MAIA,IAAIA,SAASK,QAAQL,KAArB,EAA4B;AACjCD,cAAQO,IAAR,CAAaL,aAAb;AACAA,sBAAgB,EAAhB;AACAD,cAAQ,IAAR;AACD,KAJM,MAIA,IAAI,CAACA,KAAD,IAAUZ,OAAOe,QAAP,CAAgBE,GAAhB,CAAd,EAAoC;AACzC,UAAIJ,cAAcH,MAAlB,EAA0B;AACxB,cAAM,IAAIW,KAAJ,CAAW,eAAaF,OAAOC,YAAP,CAAoBH,GAApB,CAAyB,YAASJ,aAAc,GAAxE,CAAN;AACD;;AAEDD,cAAQK,GAAR;AACD,KANM,MAMA;AACL,YAAMK,MAAMH,OAAOC,YAAP,CAAoBH,GAApB,CAAZ;AACA,UAAIJ,cAAcH,MAAd,KAAyB,CAAzB,IAA8B,CAACY,IAAIC,KAAJ,CAAU,IAAV,CAAnC,EAAoD;AAClDV,yBAAiBS,GAAjB;AACD;AACF;AACF;;AAED,MAAIT,cAAcH,MAAlB,EAA0B;AACxB,QAAIE,KAAJ,EAAW;AACT,YAAM,IAAIS,KAAJ,CAAW,8BAA4BF,OAAOC,YAAP,CAAoBR,KAApB,CAA2B,gBAAlE,CAAN;AACD,KAFD,MAEO;AACLD,cAAQO,IAAR,CAAaL,aAAb;AACD;AACF;;AAED,SAAOF,OAAP;AACD","file":"index.js","sourcesContent":["const quotes = [\n  '\"'.charCodeAt(),\n  '\\''.charCodeAt(),\n  '`'.charCodeAt(),\n];\n\nconst escape = '\\\\'.charCodeAt();\n\nconst basicSeparators = [\n  ','.charCodeAt(),\n  ';'.charCodeAt(),\n  '\\r'.charCodeAt(),\n  '\\n'.charCodeAt(),\n];\n\nconst spaceSeparators = [\n  ...basicSeparators,\n  ' '.charCodeAt(),\n];\n\n\nexport default function parseChoices(text: string) {\n  const buffer = Buffer.from(`${text}`);\n  const bufferLength = buffer.length;\n  const choices = [];\n\n  let quote = null;\n  let currentChoice = '';\n\n  let separators = text.includes(',') || text.includes(';') ? basicSeparators : spaceSeparators;\n\n  for (let i = 0; i < bufferLength; i++) {\n    const chr = buffer[i];\n\n    if (!quote && separators.includes(chr)) {\n      if (currentChoice.length) {\n        choices.push(currentChoice);\n        currentChoice = '';\n      }\n    } else if (quote && chr === escape && buffer[i + 1] === quote) {\n      // skip quote\n      i += 1;\n      currentChoice += String.fromCharCode(quote);\n    } else if (quote && chr === quote) {\n      choices.push(currentChoice);\n      currentChoice = '';\n      quote = null;\n    } else if (!quote && quotes.includes(chr)) {\n      if (currentChoice.length) {\n        throw new Error(`Unexpected ${String.fromCharCode(chr)} after ${currentChoice}`);\n      }\n\n      quote = chr;\n    } else {\n      const str = String.fromCharCode(chr);\n      if (currentChoice.length !== 0 || !str.match(/\\s/)) {\n        currentChoice += str;\n      }\n    }\n  }\n\n  if (currentChoice.length) {\n    if (quote) {\n      throw new Error(`Unexpected end, the quote ${String.fromCharCode(quote)} never ended.`);\n    } else {\n      choices.push(currentChoice);\n    }\n  }\n\n  return choices;\n}\n"]}